import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 0.24;
float FR = 29;
float SampleRate = 11;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0.060;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color body = color(199, 208, 237);
color purple = color(105, 40, 171);
color red = color(163, 42, 44);
color mouth = color(84, 38, 44);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Frieza Theme.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.004;

  if(T >= 342.512) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 112 * PI;
  }
  if(T >= 339.342 && T < 342.512) { //TAIL BOX
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 330.455 && T < 339.342) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 339.342;
  }
  if(T >= 326.777 && T < 330.455) { //TAIL CREASE
    strokes.add(2);
    lineColor.add(body);
    return T + 0.008;
  }
  if(T >= 317.346 && T < 326.777) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 326.777;
  }
  if(T >= 314.208 && T < 317.346) { //TAIL CREASE
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 305.005 && T < 314.208) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 314.208;
  }
  if(T >= 301.935 && T < 305.005) { //RIGHT SLAT
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 292.488 && T < 301.935) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 301.935;
  }
  if(T >= 289.066 && T < 292.488) { //NOSE
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 280.338 && T < 289.066) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 289.066;
  }
  if(T >= 276.461 && T < 280.338) { //EYES
    strokes.add(2);
    if(T < 276.658)
      lineColor.add(body);
    else if(T < 277.038)
      lineColor.add(red);
    else if(T < 278.967)
      lineColor.add(body);
    else if(T < 279.311)
      lineColor.add(red);
    else if(T < 279.919)
      lineColor.add(body);
    else
      lineColor.add(red);
    return T;
  }
  if(T >= 267.183 && T < 276.461) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 276.461;
  }
  if(T >= 263.937 && T < 267.183) { //EYEBROWS
    strokes.add(1);
    lineColor.add(body);
    return T + 0.002;
  }
  if(T >= 254.562 && T < 263.937) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 263.937;
  }
  if(T >= 251.368 && T < 254.562) { //MOUTH
    strokes.add(2);
    lineColor.add(red);
    return T + 0.004;
  }
  if(T >= 241.981 && T < 251.368) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 251.368;
  }
  if(T >= 238.779 && T < 241.981) { //CHIN
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 229.181 && T < 238.779) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 238.779;
  }
  if(T >= 226.211 && T < 229.181) { //HEAD
    strokes.add(2);
    if(T < 226.82)
      lineColor.add(purple);
    else if(T < 227.958)
      lineColor.add(body);
    else if(T < 228.169)
      lineColor.add(mouth);
    else if(T < 228.523)
      lineColor.add(body);
    else
      lineColor.add(purple);
    return T;
  }
  if(T >= 216.932 && T < 226.211) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 226.211;
  }
  if(T >= 213.674 && T < 216.932) { //RIGHT TRAP
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 204.291 && T < 213.674) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 213.674;
  }
  if(T >= 201.109 && T < 204.291) { //LEFT TRAP
    strokes.add(2);
    lineColor.add(body);
    return T + 0.004;
  }
  if(T >= 191.714 && T < 201.109) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.109;
  }
  if(T >= 188.496 && T < 191.714) { //LEFT SHOULDER
    strokes.add(3);
    if(T < 189.219)
      lineColor.add(body);
    else if(T < 190.522)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 179.109 && T < 188.496) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.496;
  }
  if(T >= 175.935 && T < 179.109) { //RIGHT SHOULDER
    strokes.add(3);
    if(T < 177.094)
      lineColor.add(body);
    else if(T < 178.933)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 166.537 && T < 175.935) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 175.935;
  }
  if(T >= 163.375 && T < 166.537) { //RIGHT ARM
    strokes.add(3);
    if(T < 165.245)
      lineColor.add(body);
    else if(T < 166.2)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 153.972 && T < 163.375) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 163.375;
  }
  if(T >= 150.834 && T < 153.972) { //RIGHT HAND
    strokes.add(2);
    if(T < 152.06)
      lineColor.add(body);
    else if(T < 152.438)
      lineColor.add(purple);
    else
      lineColor.add(body);
    if(T >= 152.437 && T < 152.661)
      T = 152.661;
    return T;
  }
  if(T >= 141.391 && T < 150.834) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 150.834;
  }
  if(T >= 138.257 && T < 141.391) { //LEFT ARM
    strokes.add(3);
    if(T < 140.597)
      lineColor.add(body);
    else
      lineColor.add(purple);
    return T;
  }
  if(T >= 128.838 && T < 138.257) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 138.257;
  }
  if(T >= 125.696 && T < 128.838) { //LEFT HAND
    strokes.add(2);
    
    if(T < 127.1)
      lineColor.add(body);
    else if(T < 127.455)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 116.301 && T < 125.696) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 125.696;
  }
  if(T >= 113.191 && T < 116.301) { //TAIL 2
    strokes.add(4);
    lineColor.add(body);
    return T;
  }
  if(T >= 104.927 && T < 113.191) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.191;
  }
  if(T >= 100.923 && T < 104.927) { //TAIL 1 
    strokes.add(4);
    lineColor.add(body);
    return T;
  }
  if(T >= 91.159 && T < 100.923) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.923;
  }
  if(T >= 88.089 && T < 91.159) { //CHEST
    strokes.add(3);
    if(T < 90.695)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T + 0.002;
  }
  if(T >= 78.562 && T < 88.089) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 88.089;
  }
  if(T >= 75.428 && T < 78.562) { //TORSO
    strokes.add(4);
    lineColor.add(body);
    return T;
  }
  if(T >= 66.017 && T < 75.428) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.428;
  }
  if(T >= 62.854 && T < 66.017) { //RIGHT QUAD
    strokes.add(3);
    lineColor.add(body);
    return T;
  }
  if(T >= 53.158 && T < 62.854) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.854;
  }
  if(T >= 50.301 && T < 53.158) { //LEFT QUAD
    strokes.add(3);
    lineColor.add(body);
    return T;
  }
  if(T >= 40.745 && T < 50.301) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 50.301;
  }
  if(T >= 37.736 && T < 40.745) { //RIGHT ANKLE
    strokes.add(2);
    if(T < 38.976)
      lineColor.add(body);
    else if(T < 40.180)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 28.306 && T < 37.736) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.736;
  }
  if(T >= 25.162 && T < 28.306) { //LEFT ANKLE
    strokes.add(2);
    if (T < 26.253)
      lineColor.add(body);
    else if(T < 27.581)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 15.706 && T < 25.162) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.162;
  }
  if(T >= 12.575 && T < 15.706) { //RIGHT FOOT
    strokes.add(2);
    if(T < 13.206)
      lineColor.add(body);
    else if(T < 13.478)
      lineColor.add(purple);
    else if(T < 14.048)
      lineColor.add(body);
    else if(T < 14.318)
      lineColor.add(purple);
    else if(T < 14.948)
      lineColor.add(body);
    else if(T < 15.302)
      lineColor.add(purple);
    else
      lineColor.add(body);
    return T;
  }
  if(T >= 3.127 && T < 12.575) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.575;
  }
  else { //LEFT FOOT
    strokes.add(2);
    if(T < 0.824)
      lineColor.add(body);
    else if(T < 0.992)
      lineColor.add(purple);
    else if(T < 1.54)
      lineColor.add(body);
    else if(T < 1.799)
      lineColor.add(purple);
    else if(T < 2.4)
      lineColor.add(body);
    else if(T < 2.775)
      lineColor.add(purple);
    else
      lineColor.add(body);
  }
  
  return T;
}

void draw()
{ 
  if(frameCount < (FR/2.0)) return;
  if(t <= 112 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.00032;
  }
  
  translate(width/2, height/2 - 180);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-1.0/5*sin(3.0/2 - 24*t) - 1.0/6*sin(14.0/9 - 18*t) - 1.0/6*sin(10.0/7 - 17*t) - 2.0/7*sin(3.0/2 - 16*t) - 1.0/3*sin(10.0/7 - 15*t) - 3.0/5*sin(3.0/2 - 14*t) - 1.0/7*sin(11.0/7 - 12*t) - 4.0/5*sin(11.0/7 - 8*t) - 2.0/3*sin(3.0/2 - 7*t) - 11.0/5*sin(14.0/9 - 6*t) - 26.0/9*sin(14.0/9 - 5*t) - 57.0/8*sin(11.0/7 - 4*t) - 9.0/4*sin(3.0/2 - 3*t) + 347.0/9*sin(t + 8.0/5) + 21.0/4*sin(2*t + 33.0/7) + 3.0/4*sin(9*t + 8.0/5) + 1.0/5*sin(10*t + 5.0/3) + 1.0/6*sin(11*t + 5.0/3) + 1.0/5*sin(19*t + 8.0/5) + 1.0/19*sin(21*t + 5.0/3) + 4093.0/6)*theta(111*PI -t)*theta(t - 107*PI) + (-1.0/12*sin(8.0/5 - 13*t) - 1.0/7*sin(8.0/5 - 11*t) - 1.0/15*sin(8.0/5 - 10*t) - 1.0/4*sin(8.0/5 - 9*t) - 1.0/8*sin(8.0/5 - 8*t) - 2.0/5*sin(8.0/5 - 7*t) - 1.0/5*sin(8.0/5 - 6*t) - 3.0/4*sin(8.0/5 - 5*t) - 7.0/4*sin(8.0/5 - 3*t) - 2.0/3*sin(8.0/5 - 2*t) - 137.0/11*sin(8.0/5 -t) + 1.0/3*sin(4*t + 33.0/7) + 1.0/24*sin(15*t + 33.0/7) + 1.0/28*sin(20*t + 8.0/5) + 1.0/25*sin(22*t + 8.0/5) + 1.0/23*sin(24*t + 8.0/5) + 1622.0/3)*theta(107*PI -t)*theta(t - 103*PI) + (-1.0/5*sin(14.0/9 - 21*t) - 2.0/5*sin(14.0/9 - 15*t) - 3.0/5*sin(11.0/7 - 14*t) - 31.0/9*sin(11.0/7 - 8*t) - 6.0/5*sin(8.0/5 - 6*t) + 68.0/5*sin(t + 8.0/5) + 107.0/5*sin(2*t + 33.0/7) + 139.0/3*sin(3*t + 8.0/5) + 11*sin(4*t + 8.0/5) + 5.0/4*sin(5*t + 8.0/5) + 17.0/7*sin(7*t + 8.0/5) + 25.0/13*sin(9*t + 8.0/5) + 32.0/11*sin(10*t + 8.0/5) + 15.0/8*sin(11*t + 8.0/5) + 3.0/5*sin(12*t + 14.0/3) + 12.0/11*sin(13*t + 8.0/5) + 3.0/7*sin(16*t + 8.0/5) + 7.0/5*sin(17*t + 8.0/5) + 1.0/29*sin(18*t + 18.0/5) + 2.0/5*sin(19*t + 8.0/5) + 1.0/10*sin(20*t + 3.0/2) + 2.0/5*sin(22*t + 14.0/3) + 2.0/3*sin(23*t + 8.0/5) + 2.0/7*sin(24*t + 5.0/3) - 39)*theta(103*PI -t)*theta(t - 99*PI) + (-1.0/10*sin(3.0/2 - 21*t) - 1.0/6*sin(11.0/7 - 19*t) - 1.0/11*sin(14.0/9 - 17*t) - 5.0/4*sin(8.0/5 - 9*t) - 1182.0/11*sin(8.0/5 -t) + 109.0/4*sin(2*t + 8.0/5) + 29.0/3*sin(3*t + 8.0/5) + 102.0/7*sin(4*t + 8.0/5) + 5*sin(5*t + 8.0/5) + 24.0/5*sin(6*t + 8.0/5) + 1.0/2*sin(7*t + 14.0/3) + 1.0/9*sin(8*t + 3.0/2) + 1.0/5*sin(10*t + 5.0/3) + 1.0/5*sin(11*t + 33.0/7) +sin(12*t + 8.0/5) + 2.0/5*sin(13*t + 8.0/5) + 11.0/12*sin(14*t + 8.0/5) + 1.0/4*sin(15*t + 8.0/5) + 1.0/2*sin(16*t + 8.0/5) + 1.0/5*sin(18*t + 11.0/7) + 1.0/8*sin(20*t + 3.0/2) + 1.0/5*sin(22*t + 8.0/5) + 1.0/4*sin(24*t + 8.0/5) + 1754.0/9)*theta(99*PI -t)*theta(t - 95*PI) + (-1.0/8*sin(3.0/2 - 20*t) - 1.0/7*sin(11.0/7 - 17*t) - 2.0/5*sin(11.0/7 - 13*t) - 1.0/7*sin(3.0/2 - 12*t) - 3.0/5*sin(11.0/7 - 11*t) - 6.0/5*sin(8.0/5 - 9*t) - 19.0/4*sin(11.0/7 - 5*t) - 2.0/5*sin(3.0/2 - 4*t) - 17.0/2*sin(11.0/7 - 3*t) + 157.0/5*sin(t + 8.0/5) +sin(2*t + 11.0/7) + 1.0/4*sin(6*t + 14.0/9) + 11.0/10*sin(7*t + 8.0/5) + 12.0/7*sin(8*t + 8.0/5) +sin(10*t + 8.0/5) + 1.0/4*sin(14*t + 11.0/7) + 1.0/4*sin(15*t + 8.0/5) + 1.0/3*sin(16*t + 8.0/5) + 1.0/12*sin(21*t + 33.0/7) + 1.0/9*sin(22*t + 8.0/5) + 1.0/4*sin(24*t + 8.0/5) - 318.0/5)*theta(95*PI -t)*theta(t - 91*PI) + (-2.0/3*sin(10.0/7 - 42*t) - 13.0/12*sin(10.0/7 - 40*t) - 1.0/4*sin(11.0/7 - 38*t) - 3*sin(3.0/2 - 28*t) - 4.0/5*sin(4.0/3 - 27*t) - 12.0/7*sin(3.0/2 - 26*t) - 1.0/5*sin(5.0/4 - 25*t) - 1.0/4*sin(7.0/5 - 23*t) - 8.0/5*sin(14.0/9 - 21*t) - 32.0/7*sin(11.0/7 - 8*t) - 21.0/4*sin(11.0/7 - 7*t) - 1.0/2*sin(3.0/2 - 6*t) - 169.0/12*sin(11.0/7 - 5*t) - 666.0/5*sin(11.0/7 -t) + 33.0/5*sin(2*t + 33.0/7) + 248.0/3*sin(3*t + 8.0/5) + 14.0/3*sin(4*t + 8.0/5) + 166.0/9*sin(9*t + 8.0/5) + 6.0/7*sin(10*t + 22.0/5) + 103.0/8*sin(11*t + 8.0/5) + 11.0/7*sin(12*t + 5.0/3) + 19.0/6*sin(13*t + 8.0/5) + 1.0/3*sin(14*t + 23.0/5) + 4.0/3*sin(15*t + 8.0/5) + 1.0/5*sin(16*t + 11.0/6) + 16.0/5*sin(17*t + 5.0/3) + 11.0/4*sin(18*t + 5.0/3) + 5.0/4*sin(19*t + 5.0/3) + 16.0/7*sin(20*t + 8.0/5) + 1.0/3*sin(22*t + 3.0/2) + 1.0/9*sin(24*t + 32.0/7) + 7.0/4*sin(29*t + 8.0/5) + 1.0/2*sin(30*t + 23.0/5) + 7.0/3*sin(31*t + 5.0/3) + 11.0/5*sin(32*t + 5.0/3) + 1.0/3*sin(33*t + 11.0/6) + 5.0/3*sin(34*t + 5.0/3) + 1.0/13*sin(35*t + 25.0/12) + 3.0/4*sin(36*t + 5.0/3) + 1.0/4*sin(37*t + 5.0/3) + 1.0/10*sin(39*t + 11.0/10) + 1.0/3*sin(41*t + 8.0/5) + 1.0/3*sin(43*t + 11.0/7) + 2.0/5*sin(44*t + 7.0/4) + 1.0/14*sin(45*t + 4) + 4.0/5*sin(46*t + 5.0/3) - 371.0/6)*theta(91*PI -t)*theta(t - 87*PI) + (-2.0/5*sin(8.0/5 - 13*t) - 7.0/5*sin(8.0/5 - 9*t) - 3.0/5*sin(11.0/7 - 8*t) - 3*sin(8.0/5 - 7*t) - 87.0/5*sin(8.0/5 - 3*t) - 303.0/4*sin(8.0/5 -t) + 8.0/3*sin(2*t + 33.0/7) + 1.0/3*sin(4*t + 8.0/5) + 4*sin(5*t + 33.0/7) + 1.0/8*sin(6*t + 33.0/7) + 3.0/5*sin(10*t + 8.0/5) + 6.0/5*sin(11*t + 33.0/7) + 1.0/3*sin(12*t + 14.0/3) + 1.0/9*sin(14*t + 8.0/5) + 3.0/4*sin(15*t + 33.0/7) + 1.0/11*sin(16*t + 14.0/3) + 1.0/4*sin(17*t + 33.0/7) + 1.0/24*sin(18*t + 14.0/3) + 3.0/7*sin(19*t + 33.0/7) + 1.0/17*sin(20*t + 5.0/3) + 1.0/5*sin(21*t + 14.0/3) + 1.0/18*sin(22*t + 23.0/5) + 1.0/4*sin(23*t + 33.0/7) + 1.0/18*sin(24*t + 8.0/5) - 71)*theta(87*PI -t)*theta(t - 83*PI) + (-1.0/6*sin(11.0/7 - 22*t) - 1.0/15*sin(11.0/7 - 21*t) - 1.0/2*sin(11.0/7 - 19*t) - 1.0/3*sin(3.0/2 - 16*t) - 26.0/25*sin(8.0/5 - 15*t) - 64.0/13*sin(8.0/5 - 9*t) - 29.0/5*sin(8.0/5 - 5*t) - 225.0/16*sin(8.0/5 - 3*t) + 172.0/7*sin(t + 8.0/5) + 277.0/6*sin(2*t + 8.0/5) + 7.0/8*sin(4*t + 8.0/5) + 11.0/5*sin(6*t + 33.0/7) + 9.0/4*sin(7*t + 33.0/7) + 11.0/5*sin(8*t + 33.0/7) + 3.0/4*sin(10*t + 8.0/5) + 3.0/4*sin(11*t + 14.0/3) + 7.0/3*sin(12*t + 33.0/7) + 11.0/12*sin(13*t + 33.0/7) + 7.0/5*sin(14*t + 8.0/5) + 3.0/5*sin(17*t + 8.0/5) + 1.0/3*sin(18*t + 8.0/5) + 3.0/7*sin(20*t + 8.0/5) + 1.0/5*sin(23*t + 33.0/7) - 229.0/4)*theta(83*PI -t)*theta(t - 79*PI) + (-3.0/7*sin(3.0/2 - 20*t) - 2.0/3*sin(3.0/2 - 17*t) - 9.0/10*sin(3.0/2 - 14*t) -sin(11.0/7 - 6*t) - 34.0/5*sin(11.0/7 - 4*t) + 1159.0/5*sin(t + 8.0/5) + 47.0/12*sin(2*t + 14.0/3) + 375.0/22*sin(3*t + 8.0/5) + 2.0/3*sin(5*t + 11.0/7) + 17.0/16*sin(7*t + 8.0/5) + 4.0/3*sin(8*t + 14.0/3) + 13.0/9*sin(9*t + 11.0/7) + 7.0/3*sin(10*t + 33.0/7) + 14.0/9*sin(11*t + 11.0/7) + 1.0/14*sin(12*t + 16.0/7) + 1.0/8*sin(13*t + 11.0/7) + 12.0/7*sin(15*t + 8.0/5) + 1.0/12*sin(16*t + 7.0/4) + 1.0/4*sin(18*t + 11.0/7) + 3.0/7*sin(19*t + 8.0/5) + 1.0/22*sin(21*t + 8.0/5) + 1.0/7*sin(22*t + 14.0/3) + 1.0/6*sin(23*t + 11.0/7) + 1.0/6*sin(24*t + 33.0/7) - 185.0/6)*theta(79*PI -t)*theta(t - 75*PI) + (-29.0/15*sin(11.0/7 - 31*t) - 26.0/7*sin(11.0/7 - 21*t) - 3.0/5*sin(11.0/7 - 19*t) - 9.0/5*sin(11.0/7 - 16*t) + 372.0/5*sin(t + 8.0/5) + 561.0/7*sin(2*t + 8.0/5) + 5501.0/22*sin(3*t + 33.0/7) + 133.0/5*sin(4*t + 14.0/3) + 341.0/9*sin(5*t + 33.0/7) + 34.0/5*sin(6*t + 14.0/3) + 83.0/5*sin(7*t + 14.0/3) + 138.0/5*sin(8*t + 14.0/3) + 18.0/5*sin(9*t + 8.0/5) + 361.0/20*sin(10*t + 14.0/3) + 5.0/4*sin(11*t + 8.0/5) + 38.0/5*sin(12*t + 3.0/2) + 5.0/3*sin(13*t + 5.0/3) + 125.0/14*sin(14*t + 33.0/7) + 4.0/5*sin(15*t + 13.0/3) + 11.0/6*sin(17*t + 14.0/3) + 19.0/6*sin(18*t + 14.0/3) + 10.0/7*sin(20*t + 5.0/3) + 7.0/5*sin(22*t + 23.0/5) + 2*sin(23*t + 11.0/7) + 15.0/4*sin(24*t + 14.0/3) + 14.0/3*sin(25*t + 23.0/5) + 7.0/4*sin(26*t + 3.0/2) + 27.0/7*sin(27*t + 23.0/5) + 17.0/5*sin(28*t + 14.0/3) + 22.0/7*sin(29*t + 3.0/2) + 12.0/5*sin(30*t + 14.0/9) + 5.0/6*sin(32*t + 9.0/5) + 23.0/9*sin(33*t + 14.0/3) + 19.0/6*sin(34*t + 23.0/5) + 2.0/5*sin(35*t + 8.0/5) - 392.0/5)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/3*sin(10.0/7 - 14*t) - 13.0/3*sin(11.0/7 - 6*t) - 115.0/3*sin(11.0/7 -t) + 115.0/4*sin(2*t + 8.0/5) + 119.0/5*sin(3*t + 8.0/5) + 7.0/5*sin(4*t + 14.0/3) + 41.0/7*sin(5*t + 8.0/5) + 17.0/3*sin(7*t + 8.0/5) + 6.0/5*sin(8*t + 14.0/3) + 4.0/3*sin(9*t + 14.0/9) + 1.0/2*sin(10*t + 7.0/4) + 6.0/5*sin(11*t + 8.0/5) + 6.0/7*sin(12*t + 5.0/3) + 1.0/18*sin(13*t + 17.0/9) + 1.0/11*sin(15*t + 9.0/5) + 1.0/6*sin(16*t + 12.0/7) +sin(17*t + 5.0/3) + 1.0/12*sin(18*t + 31.0/7) + 2.0/5*sin(19*t + 11.0/7) + 1.0/4*sin(20*t + 23.0/5) + 1.0/4*sin(21*t + 8.0/5) + 1.0/27*sin(22*t + 37.0/9) + 1.0/6*sin(23*t + 8.0/5) + 1.0/12*sin(24*t + 5.0/3) + 1091.0/5)*theta(71*PI -t)*theta(t - 67*PI) + (-1.0/9*sin(3.0/2 - 24*t) - 2.0/7*sin(11.0/7 - 22*t) - 2.0/7*sin(8.0/5 - 21*t) - 1.0/4*sin(11.0/7 - 18*t) - 1.0/17*sin(3.0/2 - 17*t) - 5.0/3*sin(8.0/5 - 12*t) - 4.0/5*sin(11.0/7 - 11*t) - 8.0/3*sin(8.0/5 - 8*t) - 16.0/5*sin(8.0/5 - 6*t) - 7.0/4*sin(11.0/7 - 5*t) - 17.0/6*sin(8.0/5 - 4*t) - 8.0/7*sin(11.0/7 - 3*t) - 318.0/7*sin(8.0/5 - 2*t) + 79.0/10*sin(t + 8.0/5) + 20.0/19*sin(7*t + 33.0/7) + 5.0/6*sin(9*t + 8.0/5) + 2.0/5*sin(10*t + 8.0/5) + 1.0/4*sin(13*t + 8.0/5) + 1.0/4*sin(15*t + 33.0/7) + 3.0/5*sin(16*t + 33.0/7) + 1.0/8*sin(19*t + 8.0/5) + 1.0/5*sin(20*t + 33.0/7) + 1.0/5*sin(23*t + 11.0/7) - 2227.0/6)*theta(67*PI -t)*theta(t - 63*PI) + (-24.0/5*sin(3.0/2 - 18*t) - 27.0/4*sin(3.0/2 - 17*t) - 119.0/15*sin(3.0/2 - 16*t) - 2*sin(3.0/2 - 15*t) - 4.0/3*sin(14.0/9 - 13*t) - 17.0/4*sin(3.0/2 - 12*t) - 149.0/10*sin(11.0/7 - 10*t) - 441.0/8*sin(14.0/9 - 8*t) - 199.0/18*sin(10.0/7 - 7*t) + 505.0/6*sin(t + 8.0/5) + 239.0/3*sin(2*t + 8.0/5) + 31.0/3*sin(3*t + 14.0/3) + 278.0/5*sin(4*t + 8.0/5) + 813.0/5*sin(5*t + 8.0/5) + 113.0/5*sin(6*t + 14.0/3) + 37.0/6*sin(9*t + 10.0/7) + 28.0/5*sin(11*t + 11.0/7) + 4*sin(14*t + 8.0/5) + 5.0/7*sin(19*t + 11.0/7) + 2.0/3*sin(20*t + 23.0/5) + 17.0/6*sin(21*t + 8.0/5) + 6.0/5*sin(22*t + 14.0/3) + 1.0/2*sin(23*t + 9.0/2) + 3.0/5*sin(24*t + 4.0/3) - 3761.0/6)*theta(63*PI -t)*theta(t - 59*PI) + (-5.0/3*sin(3.0/2 - 21*t) - 33.0/5*sin(3.0/2 - 19*t) - 23.0/6*sin(3.0/2 - 18*t) - 13.0/4*sin(11.0/7 - 13*t) - 59.0/6*sin(11.0/7 - 12*t) - 67.0/5*sin(11.0/7 - 9*t) - 76.0/5*sin(11.0/7 - 8*t) - 1905.0/17*sin(11.0/7 - 3*t) - 293.0/6*sin(8.0/5 -t) + 88*sin(2*t + 8.0/5) + 705.0/11*sin(4*t + 8.0/5) + 901.0/7*sin(5*t + 8.0/5) + 196.0/15*sin(6*t + 8.0/5) + 52.0/5*sin(7*t + 8.0/5) + 1.0/4*sin(10*t + 8.0/5) + 6*sin(11*t + 8.0/5) + 34.0/7*sin(14*t + 8.0/5) + 4.0/9*sin(15*t + 23.0/5) + 5.0/3*sin(16*t + 8.0/5) + 13.0/5*sin(17*t + 8.0/5) + 10.0/3*sin(20*t + 8.0/5) + 1.0/4*sin(22*t + 14.0/3) + 9.0/8*sin(23*t + 8.0/5) +sin(24*t + 8.0/5) + 1949.0/4)*theta(59*PI -t)*theta(t - 55*PI) + (-17.0/8*sin(3.0/2 - 22*t) - 3.0/2*sin(3.0/2 - 16*t) - 47.0/5*sin(11.0/7 - 13*t) - 57.0/5*sin(11.0/7 - 8*t) - 111.0/4*sin(11.0/7 - 4*t) - 80*sin(11.0/7 - 3*t) - 682.0/7*sin(8.0/5 -t) + 32.0/3*sin(2*t + 8.0/5) + 272.0/13*sin(5*t + 8.0/5) + 164.0/3*sin(6*t + 8.0/5) + 177.0/8*sin(7*t + 8.0/5) + 17.0/6*sin(9*t + 8.0/5) + 20.0/3*sin(10*t + 8.0/5) + 29.0/5*sin(11*t + 14.0/3) + 133.0/4*sin(12*t + 8.0/5) + 62.0/7*sin(14*t + 8.0/5) + 2.0/3*sin(15*t + 7.0/4) + 8.0/5*sin(17*t + 5.0/3) + 64.0/13*sin(18*t + 8.0/5) + 7.0/5*sin(19*t + 14.0/3) + 1.0/4*sin(20*t + 5.0/3) + 1.0/7*sin(21*t + 9.0/5) + 31.0/7*sin(23*t + 8.0/5) + 9.0/5*sin(24*t + 8.0/5) + 3041.0/5)*theta(55*PI -t)*theta(t - 51*PI) + (-3.0/5*sin(11.0/7 - 32*t) - 7.0/5*sin(3.0/2 - 26*t) - 29.0/14*sin(13.0/9 - 25*t) - 14.0/5*sin(14.0/9 - 22*t) -sin(7.0/5 - 19*t) - 48.0/7*sin(3.0/2 - 18*t) - 7.0/5*sin(5.0/4 - 17*t) - 33.0/4*sin(3.0/2 - 16*t) - 35.0/17*sin(7.0/5 - 15*t) - 1.0/5*sin(4.0/3 - 14*t) - 47.0/12*sin(3.0/2 - 13*t) - 71.0/8*sin(3.0/2 - 9*t) - 27.0/4*sin(11.0/7 - 8*t) - 41.0/3*sin(8.0/5 - 6*t) - 227.0/6*sin(11.0/7 - 4*t) - 278.0/9*sin(11.0/7 - 2*t) - 411.0/5*sin(11.0/7 -t) + 73.0/4*sin(3*t + 8.0/5) + 53.0/2*sin(5*t + 8.0/5) + 83.0/4*sin(7*t + 8.0/5) + 4.0/5*sin(10*t + 9.0/5) + 18*sin(11*t + 8.0/5) + 29.0/6*sin(12*t + 5.0/3) + 35.0/17*sin(20*t + 5.0/3) + 1.0/2*sin(21*t + 8.0/5) + 5.0/3*sin(23*t + 8.0/5) + 7.0/4*sin(24*t + 5.0/3) + 5.0/4*sin(27*t + 8.0/5) + 2.0/5*sin(28*t + 2) + 12.0/5*sin(29*t + 12.0/7) + 14.0/15*sin(30*t + 9.0/5) + 3.0/4*sin(31*t + 12.0/7) + 29.0/28*sin(33*t + 7.0/4) + 2*sin(34*t + 7.0/4) + 2519.0/3)*theta(51*PI -t)*theta(t - 47*PI) + (-21.0/10*sin(14.0/9 - 22*t) - 17.0/4*sin(11.0/7 - 21*t) - 3.0/5*sin(3.0/2 - 20*t) - 5.0/3*sin(3.0/2 - 17*t) - 14.0/3*sin(11.0/7 - 14*t) - 9.0/2*sin(11.0/7 - 13*t) - 38.0/7*sin(11.0/7 - 12*t) - 29.0/3*sin(11.0/7 - 9*t) - 53.0/5*sin(11.0/7 - 8*t) - 199.0/5*sin(11.0/7 - 5*t) - 734.0/7*sin(8.0/5 - 4*t) + 175.0/2*sin(t + 8.0/5) + 271.0/4*sin(2*t + 33.0/7) + 112.0/3*sin(3*t + 8.0/5) + 19.0/3*sin(6*t + 8.0/5) + 38.0/5*sin(7*t + 8.0/5) + 8.0/5*sin(10*t + 11.0/7) + 21.0/2*sin(11*t + 8.0/5) + 17.0/9*sin(15*t + 8.0/5) + 30.0/29*sin(16*t + 14.0/3) + 2.0/3*sin(18*t + 14.0/3) + 1.0/4*sin(19*t + 7.0/4) + 7.0/8*sin(23*t + 14.0/3) + 17.0/7*sin(24*t + 8.0/5) - 3937.0/5)*theta(47*PI -t)*theta(t - 43*PI) + (-2.0/5*sin(7.0/5 - 33*t) - 3.0/2*sin(10.0/7 - 29*t) - 1.0/3*sin(9.0/7 - 26*t) -sin(7.0/5 - 25*t) - 1.0/3*sin(1 - 22*t) - 51.0/13*sin(7.0/5 - 17*t) - 46.0/9*sin(11.0/7 - 16*t) - 13.0/4*sin(10.0/7 - 14*t) - 44.0/7*sin(3.0/2 - 13*t) - 39.0/5*sin(8.0/5 - 10*t) - 6.0/5*sin(4.0/3 - 7*t) - 25.0/2*sin(3.0/2 - 6*t) - 237.0/4*sin(11.0/7 -t) + 38*sin(2*t + 8.0/5) + 101.0/3*sin(3*t + 8.0/5) + 263.0/4*sin(4*t + 8.0/5) + 55.0/2*sin(5*t + 8.0/5) + 45.0/4*sin(8*t + 8.0/5) + 26.0/3*sin(9*t + 8.0/5) + 95.0/8*sin(11*t + 8.0/5) + 35.0/6*sin(12*t + 5.0/3) + 38.0/5*sin(15*t + 8.0/5) + 13.0/3*sin(18*t + 3.0/2) + 29.0/7*sin(19*t + 23.0/5) + 17.0/2*sin(20*t + 5.0/3) + 12.0/7*sin(21*t + 14.0/3) + 2.0/5*sin(23*t + 2) + 2.0/5*sin(24*t + 7.0/4) + 2.0/3*sin(27*t + 14.0/3) +sin(28*t + 14.0/9) + 2.0/3*sin(30*t + 12.0/7) + 2.0/5*sin(31*t + 15.0/8) + 1.0/10*sin(32*t + 1.0/3) - 21913.0/22)*theta(43*PI -t)*theta(t - 39*PI) + (-1.0/10*sin(11.0/7 - 24*t) - 3.0/4*sin(8.0/5 - 21*t) - 19.0/10*sin(8.0/5 - 13*t) - 23.0/5*sin(8.0/5 - 11*t) - 76.0/7*sin(8.0/5 - 5*t) - 107.0/3*sin(8.0/5 - 3*t) + 439.0/3*sin(t + 8.0/5) + 569.0/6*sin(2*t + 8.0/5) + 289.0/12*sin(4*t + 8.0/5) + 13.0/14*sin(6*t + 14.0/3) + 16.0/5*sin(7*t + 14.0/3) + 6.0/5*sin(8*t + 33.0/7) + 23.0/4*sin(9*t + 33.0/7) +sin(10*t + 8.0/5) + 5.0/8*sin(12*t + 14.0/3) + 6.0/5*sin(14*t + 33.0/7) + 3.0/2*sin(15*t + 33.0/7) + 1.0/15*sin(16*t + 21.0/5) + 9.0/5*sin(17*t + 33.0/7) + 1.0/4*sin(18*t + 5.0/3) + 5.0/4*sin(19*t + 14.0/3) + 1.0/3*sin(20*t + 14.0/3) + 2.0/5*sin(22*t + 14.0/3) +sin(23*t + 33.0/7) - 494.0/9)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/2*sin(13.0/9 - 21*t) - 7.0/8*sin(11.0/7 - 20*t) - 2.0/5*sin(3.0/2 - 17*t) - 23.0/6*sin(11.0/7 - 13*t) - 24.0/5*sin(11.0/7 - 12*t) - 9.0/4*sin(8.0/5 - 9*t) - 71.0/4*sin(8.0/5 - 8*t) - 461.0/5*sin(8.0/5 - 4*t) - 1066.0/5*sin(8.0/5 - 2*t) + 617.0/5*sin(t + 33.0/7) + 175.0/6*sin(3*t + 8.0/5) + 166.0/11*sin(5*t + 8.0/5) + 419.0/19*sin(6*t + 8.0/5) + 252.0/11*sin(7*t + 8.0/5) + 4.0/7*sin(10*t + 8.0/5) + 107.0/12*sin(11*t + 8.0/5) + 5.0/3*sin(14*t + 14.0/3) + 19.0/7*sin(15*t + 8.0/5) + 19.0/4*sin(16*t + 33.0/7) + 1.0/5*sin(18*t + 23.0/5) + 23.0/6*sin(19*t + 8.0/5) + 14.0/15*sin(22*t + 11.0/7) + 22.0/5*sin(23*t + 8.0/5) + 3.0/4*sin(24*t + 8.0/5) + 790)*theta(35*PI -t)*theta(t - 31*PI) + (-11.0/7*sin(11.0/7 - 21*t) - 3.0/5*sin(11.0/7 - 18*t) - 8.0/7*sin(11.0/7 - 15*t) - 590.0/7*sin(8.0/5 -t) + 219.0/5*sin(2*t + 33.0/7) + 257.0/3*sin(3*t + 8.0/5) + 27*sin(4*t + 8.0/5) + 8.0/5*sin(5*t + 8.0/5) + 76.0/7*sin(6*t + 8.0/5) + 12.0/5*sin(7*t + 33.0/7) + 3.0/5*sin(8*t + 8.0/5) + 2*sin(9*t + 14.0/3) + 52.0/5*sin(10*t + 8.0/5) + 1.0/9*sin(11*t + 23.0/12) + 3.0/5*sin(12*t + 14.0/3) + 2*sin(13*t + 8.0/5) +sin(14*t + 14.0/3) +sin(16*t + 8.0/5) + 12.0/11*sin(17*t + 11.0/7) + 3.0/5*sin(19*t + 8.0/5) + 1.0/3*sin(20*t + 11.0/7) + 1.0/5*sin(22*t + 10.0/7) + 2.0/7*sin(23*t + 8.0/5) + 1.0/3*sin(24*t + 3.0/2) - 535.0/6)*theta(31*PI -t)*theta(t - 27*PI) + (-17.0/8*sin(8.0/5 - 40*t) - 2.0/3*sin(8.0/5 - 39*t) - 3.0/4*sin(11.0/7 - 38*t) - 9.0/4*sin(11.0/7 - 31*t) - 8.0/5*sin(11.0/7 - 29*t) - 27.0/7*sin(11.0/7 - 27*t) - 12.0/5*sin(11.0/7 - 22*t) - 53.0/5*sin(8.0/5 - 20*t) - 19.0/5*sin(11.0/7 - 18*t) - 55.0/7*sin(8.0/5 - 16*t) - 17.0/7*sin(11.0/7 - 12*t) - 270.0/7*sin(8.0/5 - 8*t) - 377.0/9*sin(8.0/5 - 7*t) - 65.0/4*sin(11.0/7 - 6*t) - 53.0/5*sin(14.0/9 - 5*t) - 1653.0/5*sin(8.0/5 - 2*t) + 307.0/5*sin(t + 8.0/5) + 161.0/2*sin(3*t + 33.0/7) + 57.0/4*sin(4*t + 11.0/7) + 179.0/10*sin(9*t + 8.0/5) + 34.0/5*sin(10*t + 11.0/7) + 21.0/2*sin(11*t + 8.0/5) + 9.0/2*sin(13*t + 8.0/5) + 22.0/5*sin(14*t + 33.0/7) + 47.0/5*sin(15*t + 11.0/7) + 9.0/2*sin(17*t + 14.0/3) + 72.0/5*sin(19*t + 8.0/5) + 47.0/7*sin(21*t + 8.0/5) + 13.0/2*sin(23*t + 8.0/5) + 5.0/3*sin(24*t + 14.0/3) + 1.0/7*sin(25*t + 11.0/6) + 23.0/7*sin(26*t + 8.0/5) + 3.0/2*sin(28*t + 5.0/3) + 7.0/3*sin(30*t + 11.0/7) + 2.0/7*sin(32*t + 12.0/7) + 4.0/7*sin(33*t + 3.0/2) + 4.0/3*sin(34*t + 8.0/5) + 8.0/5*sin(35*t + 33.0/7) + 2.0/5*sin(36*t + 23.0/5) + 5.0/4*sin(37*t + 3.0/2) - 613.0/5)*theta(27*PI -t)*theta(t - 23*PI) + (-5.0/4*sin(3.0/2 - 34*t) - 6.0/5*sin(3.0/2 - 33*t) - 3.0/2*sin(3.0/2 - 31*t) - 11.0/7*sin(3.0/2 - 28*t) - 3.0/5*sin(11.0/7 - 26*t) - 7.0/5*sin(3.0/2 - 25*t) - 1.0/2*sin(3.0/2 - 22*t) - 16.0/7*sin(8.0/5 - 20*t) - 88.0/29*sin(3.0/2 - 19*t) - 1.0/2*sin(1 - 18*t) - 37.0/9*sin(11.0/7 - 17*t) - 47.0/5*sin(11.0/7 - 14*t) - 15.0/4*sin(3.0/2 - 12*t) - 58.0/7*sin(11.0/7 - 11*t) - 387.0/4*sin(11.0/7 -t) + 314.0/5*sin(2*t + 8.0/5) + 548.0/3*sin(3*t + 8.0/5) + 47.0/4*sin(4*t + 14.0/3) + 16.0/3*sin(5*t + 11.0/7) + 11.0/5*sin(6*t + 14.0/3) + 58.0/5*sin(7*t + 8.0/5) + 1.0/5*sin(8*t + 10.0/7) + 63.0/5*sin(9*t + 8.0/5) + 37.0/5*sin(10*t + 8.0/5) + 1.0/2*sin(13*t + 10.0/7) + 12.0/5*sin(15*t + 10.0/7) + 1.0/2*sin(16*t + 3.0/2) + 13.0/6*sin(21*t + 11.0/7) + 1.0/10*sin(23*t + 8.0/3) + 10.0/9*sin(24*t + 8.0/5) + 1.0/5*sin(27*t + 3.0/2) + 1.0/4*sin(29*t + 9.0/8) + 3.0/4*sin(30*t + 5.0/3) + 2.0/5*sin(32*t + 6.0/5) + 10.0/11*sin(35*t + 3.0/2) + 1.0/4*sin(36*t + 33.0/7) + 1.0/4*sin(37*t + 9.0/2) +sin(38*t + 8.0/5) + 770.0/3)*theta(23*PI -t)*theta(t - 19*PI) + (-2.0/3*sin(11.0/7 - 36*t) - 8.0/3*sin(11.0/7 - 26*t) - 1.0/4*sin(1 - 24*t) - 119.0/5*sin(11.0/7 - 7*t) + 1103.0/12*sin(t + 8.0/5) + 379.0/3*sin(2*t + 33.0/7) + 639.0/10*sin(3*t + 33.0/7) + 1216.0/9*sin(4*t + 8.0/5) + 152.0/3*sin(5*t + 3.0/2) + 926.0/9*sin(6*t + 8.0/5) + 73.0/5*sin(8*t + 8.0/5) + 128.0/5*sin(9*t + 11.0/7) + 9.0/4*sin(10*t + 8.0/5) + 171.0/7*sin(11*t + 33.0/7) + 67.0/5*sin(12*t + 8.0/5) + 2.0/5*sin(13*t + 1) + 23.0/5*sin(14*t + 14.0/3) + 15.0/2*sin(15*t + 8.0/5) + 4.0/5*sin(16*t + 9.0/7) + 49.0/8*sin(17*t + 14.0/3) + 52.0/5*sin(18*t + 11.0/7) + 25.0/3*sin(19*t + 3.0/2) + 4.0/5*sin(20*t + 13.0/7) + 31.0/5*sin(21*t + 14.0/3) + 20.0/3*sin(22*t + 11.0/7) + 7.0/4*sin(23*t + 14.0/9) + 3.0/2*sin(25*t + 5.0/3) + 8.0/5*sin(27*t + 23.0/5) + 53.0/13*sin(28*t + 14.0/9) + 1.0/2*sin(29*t + 5.0/4) + 3.0/5*sin(30*t + 8.0/5) + 1.0/6*sin(31*t + 7.0/5) + 17.0/7*sin(32*t + 3.0/2) + 7.0/6*sin(33*t + 11.0/7) + 13.0/14*sin(34*t + 3.0/2) + 5.0/9*sin(35*t + 9.0/2) + 5.0/7*sin(37*t + 8.0/5) + 23.0/22*sin(38*t + 11.0/7) - 2422.0/5)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/9*sin(4.0/9 - 24*t) - 13.0/6*sin(10.0/7 - 23*t) - 4.0/7*sin(11.0/7 - 22*t) - 1.0/4*sin(1.0/20 - 20*t) - 32.0/5*sin(3.0/2 - 19*t) - 41.0/6*sin(3.0/2 - 16*t) - 32.0/3*sin(13.0/9 - 15*t) - 9.0/4*sin(10.0/7 - 14*t) - 25.0/4*sin(3.0/2 - 11*t) - 47.0/3*sin(3.0/2 - 10*t) - 95.0/6*sin(3.0/2 - 9*t) - 62.0/3*sin(11.0/7 - 4*t) - 228.0/7*sin(11.0/7 - 3*t) - 473.0/5*sin(11.0/7 - 2*t) - 421.0/6*sin(11.0/7 -t) + 234.0/5*sin(5*t + 8.0/5) + 221.0/10*sin(6*t + 14.0/3) + 399.0/5*sin(7*t + 8.0/5) + 18.0/5*sin(8*t + 23.0/5) + 10*sin(12*t + 5.0/3) + 57.0/8*sin(13*t + 5.0/3) + 67.0/5*sin(17*t + 5.0/3) + 12.0/7*sin(18*t + 7.0/4) + 5.0/4*sin(21*t + 5.0/3) + 1034.0/3)*theta(15*PI -t)*theta(t - 11*PI) + (-17.0/5*sin(11.0/7 - 23*t) - 15.0/2*sin(8.0/5 - 17*t) - 61.0/7*sin(11.0/7 - 16*t) - 97.0/14*sin(8.0/5 - 15*t) - 18.0/5*sin(11.0/7 - 12*t) - 47.0/3*sin(11.0/7 - 6*t) - 266.0/3*sin(11.0/7 - 5*t) + 543.0/5*sin(t + 8.0/5) + 641.0/8*sin(2*t + 8.0/5) + 408.0/11*sin(3*t + 8.0/5) + 187.0/2*sin(4*t + 8.0/5) + 7.0/6*sin(7*t + 23.0/5) + 73.0/3*sin(8*t + 8.0/5) + 9.0/2*sin(9*t + 8.0/5) + 7.0/5*sin(10*t + 14.0/3) + 5.0/2*sin(11*t + 14.0/3) + 9.0/2*sin(13*t + 33.0/7) + 25.0/6*sin(14*t + 8.0/5) + 1.0/8*sin(18*t + 29.0/7) + 34.0/11*sin(19*t + 14.0/3) + 13.0/5*sin(20*t + 14.0/3) +sin(21*t + 14.0/3) + 7.0/4*sin(22*t + 14.0/3) + 1.0/10*sin(24*t + 23.0/5) - 2181.0/4)*theta(11*PI -t)*theta(t - 7*PI) + (-1.0/2*sin(4.0/3 - 40*t) - 4.0/3*sin(3.0/2 - 38*t) - 1.0/4*sin(3.0/2 - 36*t) - 8.0/9*sin(7.0/5 - 34*t) - 7.0/3*sin(10.0/7 - 33*t) - 29.0/10*sin(3.0/2 - 29*t) - 4.0/5*sin(7.0/5 - 28*t) - 7.0/5*sin(3.0/2 - 25*t) - 2.0/5*sin(7.0/5 - 23*t) - 14.0/3*sin(3.0/2 - 22*t) - 17.0/9*sin(3.0/2 - 21*t) - 29.0/15*sin(3.0/2 - 20*t) - 29.0/4*sin(3.0/2 - 17*t) - 21.0/4*sin(3.0/2 - 13*t) - 73.0/9*sin(3.0/2 - 12*t) - 46.0/3*sin(3.0/2 - 11*t) -sin(10.0/7 - 10*t) - 35.0/2*sin(11.0/7 - 7*t) - 14*sin(11.0/7 - 6*t) - 363.0/5*sin(11.0/7 - 5*t) - 99.0/4*sin(11.0/7 - 4*t) - 919.0/18*sin(11.0/7 - 3*t) - 487.0/5*sin(11.0/7 - 2*t) + 494.0/3*sin(t + 8.0/5) + 12.0/11*sin(8*t + 14.0/3) + 28.0/3*sin(9*t + 8.0/5) + 22.0/9*sin(14*t + 8.0/5) + 6.0/5*sin(15*t + 12.0/7) + 6*sin(16*t + 8.0/5) + 8.0/7*sin(18*t + 8.0/5) + 12.0/5*sin(19*t + 5.0/3) + 4.0/3*sin(24*t + 5.0/3) + 9.0/10*sin(26*t + 5.0/3) + 3.0/5*sin(27*t + 5.0/3) + 1.0/2*sin(30*t + 8.0/5) +sin(31*t + 12.0/7) + 4.0/3*sin(32*t + 5.0/3) + 1.0/13*sin(37*t + 9.0/5) + 3.0/2*sin(39*t + 12.0/7) + 995.0/3)*theta(7*PI -t)*theta(t - 3*PI) + (-11.0/5*sin(10.0/7 - 40*t) - 6.0/5*sin(14.0/9 - 38*t) - 23.0/6*sin(3.0/2 - 33*t) - 4.0/7*sin(16.0/15 - 32*t) -sin(13.0/9 - 31*t) - 14.0/13*sin(7.0/5 - 30*t) - 7.0/5*sin(7.0/5 - 27*t) - 15.0/4*sin(7.0/5 - 26*t) - 24.0/7*sin(7.0/5 - 25*t) - 3.0/2*sin(10.0/7 - 23*t) -sin(3.0/2 - 22*t) - 4.0/5*sin(7.0/5 - 19*t) - 17.0/7*sin(3.0/2 - 18*t) - 3*sin(10.0/7 - 16*t) - 42.0/5*sin(3.0/2 - 15*t) - 31.0/7*sin(3.0/2 - 13*t) - 9.0/4*sin(10.0/7 - 12*t) - 52.0/7*sin(3.0/2 - 11*t) - 145.0/16*sin(3.0/2 - 10*t) - 79.0/10*sin(3.0/2 - 9*t) - 9.0/8*sin(6.0/5 - 8*t) - 47.0/2*sin(11.0/7 - 7*t) - 325.0/6*sin(11.0/7 - 5*t) - 153.0/4*sin(11.0/7 - 4*t) - 551.0/11*sin(11.0/7 - 3*t) - 77.0/5*sin(11.0/7 - 2*t) + 862.0/5*sin(t + 8.0/5) + 11*sin(6*t + 14.0/9) + 3.0/4*sin(14*t + 5.0/4) + 3.0/5*sin(17*t + 11.0/7) + 1.0/6*sin(20*t + 15.0/4) + 13.0/3*sin(21*t + 5.0/3) + 1.0/3*sin(24*t + 9.0/7) + 8.0/5*sin(28*t + 5.0/3) + 1.0/2*sin(29*t + 8.0/5) + 35.0/17*sin(34*t + 5.0/3) + 5.0/4*sin(35*t + 9.0/5) + 1.0/11*sin(36*t + 18.0/7) +sin(37*t + 8.0/5) + 1.0/3*sin(39*t + 10.0/9) - 2863.0/6)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-1.0/6*sin(3.0/2 - 24*t) - 1.0/15*sin(7.0/5 - 23*t) - 1.0/17*sin(4.0/3 - 21*t) - 1.0/4*sin(3.0/2 - 20*t) - 1.0/6*sin(3.0/2 - 18*t) - 1.0/8*sin(13.0/9 - 17*t) - 3.0/5*sin(3.0/2 - 14*t) - 1.0/5*sin(3.0/2 - 12*t) - 1.0/2*sin(3.0/2 - 11*t) - 1.0/4*sin(11.0/7 - 10*t) - 5.0/3*sin(11.0/7 - 8*t) - 7.0/4*sin(14.0/9 - 5*t) - 19.0/4*sin(11.0/7 - 4*t) - 37.0/2*sin(11.0/7 - 2*t) - 67.0/4*sin(11.0/7 -t) + 51.0/7*sin(3*t + 8.0/5) + 1.0/3*sin(6*t + 8.0/5) + 1.0/4*sin(7*t + 3.0/2) + 5.0/7*sin(9*t + 8.0/5) + 1.0/4*sin(13*t + 8.0/5) + 1.0/12*sin(15*t + 10.0/7) + 1.0/5*sin(19*t + 8.0/5) - 2937.0/2)*theta(111*PI -t)*theta(t - 107*PI) + (-1.0/11*sin(11.0/7 - 23*t) - 1.0/8*sin(11.0/7 - 21*t) - 1.0/6*sin(11.0/7 - 19*t) - 1.0/5*sin(11.0/7 - 17*t) - 1.0/4*sin(11.0/7 - 15*t) - 1.0/3*sin(11.0/7 - 13*t) - 1.0/2*sin(8.0/5 - 11*t) - 3.0/4*sin(8.0/5 - 9*t) - 4.0/3*sin(8.0/5 - 7*t) - 8.0/3*sin(8.0/5 - 5*t) - 38.0/5*sin(8.0/5 - 3*t) - 209.0/3*sin(8.0/5 -t) + 1.0/5*sin(2*t + 8.0/5) + 1.0/6*sin(4*t + 8.0/5) + 1.0/8*sin(6*t + 8.0/5) + 1.0/10*sin(8*t + 8.0/5) + 1.0/12*sin(10*t + 11.0/7) + 1.0/14*sin(12*t + 11.0/7) + 1.0/15*sin(14*t + 11.0/7) + 1.0/17*sin(16*t + 11.0/7) + 1.0/19*sin(18*t + 11.0/7) + 1.0/20*sin(20*t + 11.0/7) + 1.0/21*sin(22*t + 11.0/7) + 1.0/22*sin(24*t + 11.0/7) - 1329)*theta(107*PI -t)*theta(t - 103*PI) + (-1.0/12*sin(11.0/7 - 15*t) - 2.0/3*sin(11.0/7 - 6*t) - 5*sin(8.0/5 - 2*t) - 235.0/18*sin(8.0/5 -t) + 9*sin(3*t + 8.0/5) + 17.0/6*sin(4*t + 8.0/5) + 1.0/11*sin(5*t + 7.0/4) + 3.0/5*sin(7*t + 8.0/5) + 2.0/7*sin(8*t + 33.0/7) + 1.0/4*sin(9*t + 8.0/5) + 3.0/5*sin(10*t + 8.0/5) + 2.0/5*sin(11*t + 8.0/5) + 1.0/4*sin(12*t + 33.0/7) + 1.0/5*sin(13*t + 8.0/5) + 1.0/24*sin(14*t + 11.0/7) + 1.0/14*sin(16*t + 5.0/3) + 2.0/7*sin(17*t + 8.0/5) + 1.0/24*sin(18*t + 23.0/5) + 1.0/19*sin(20*t + 11.0/7) + 1.0/13*sin(22*t + 14.0/3) + 1.0/9*sin(23*t + 8.0/5) + 1.0/15*sin(24*t + 8.0/5) - 11259.0/10)*theta(103*PI -t)*theta(t - 99*PI) + (-1.0/25*sin(11.0/7 - 23*t) - 1.0/13*sin(11.0/7 - 17*t) - 1.0/3*sin(11.0/7 - 15*t) + 47.0/3*sin(t + 8.0/5) + 239.0/7*sin(2*t + 8.0/5) + 16.0/5*sin(3*t + 33.0/7) + 6*sin(4*t + 8.0/5) + 1.0/5*sin(5*t + 23.0/5) + 14.0/9*sin(6*t + 8.0/5) + 9.0/8*sin(7*t + 33.0/7) + 7.0/4*sin(8*t + 8.0/5) + 1.0/4*sin(9*t + 8.0/5) + 13.0/7*sin(10*t + 8.0/5) + 2.0/3*sin(11*t + 8.0/5) +sin(12*t + 8.0/5) + 1.0/10*sin(13*t + 14.0/3) + 1.0/6*sin(14*t + 11.0/7) + 1.0/8*sin(16*t + 3.0/2) + 4.0/9*sin(18*t + 8.0/5) + 1.0/5*sin(19*t + 8.0/5) + 1.0/2*sin(20*t + 8.0/5) + 1.0/8*sin(21*t + 8.0/5) + 1.0/4*sin(22*t + 8.0/5) + 1.0/8*sin(24*t + 11.0/7) - 2525.0/7)*theta(99*PI -t)*theta(t - 95*PI) + (-1.0/4*sin(14.0/9 - 17*t) - 5.0/4*sin(11.0/7 - 9*t) - 17.0/8*sin(11.0/7 - 8*t) + 11.0/5*sin(t + 14.0/3) + 156.0/7*sin(2*t + 8.0/5) + 12.0/11*sin(3*t + 8.0/5) + 141.0/20*sin(4*t + 8.0/5) + 4.0/5*sin(5*t + 14.0/3) + 19.0/7*sin(6*t + 8.0/5) + 8.0/3*sin(7*t + 8.0/5) + 13.0/6*sin(10*t + 8.0/5) + 8.0/9*sin(11*t + 8.0/5) + 1.0/3*sin(12*t + 8.0/5) + 2.0/7*sin(13*t + 5.0/3) + 1.0/23*sin(14*t + 14.0/3) + 1.0/5*sin(16*t + 5.0/3) + 5.0/9*sin(18*t + 8.0/5) + 2.0/5*sin(19*t + 8.0/5) + 1.0/16*sin(20*t + 5.0/3) + 1.0/11*sin(21*t + 23.0/5) + 1.0/18*sin(23*t + 8.0/5) + 1.0/4*sin(24*t + 8.0/5) + 467.0/5)*theta(95*PI -t)*theta(t - 91*PI) + (-1.0/7*sin(3.0/2 - 45*t) - 25.0/24*sin(10.0/7 - 39*t) - 3.0/5*sin(7.0/5 - 38*t) - 5.0/6*sin(7.0/5 - 37*t) - 4.0/5*sin(7.0/5 - 36*t) -sin(7.0/5 - 35*t) - 4.0/7*sin(10.0/7 - 34*t) - 5.0/4*sin(3.0/2 - 32*t) - 4.0/5*sin(3.0/2 - 23*t) -sin(3.0/2 - 22*t) - 1.0/4*sin(7.0/5 - 21*t) - 2.0/3*sin(3.0/2 - 19*t) -sin(3.0/2 - 18*t) - 19.0/5*sin(3.0/2 - 16*t) -sin(3.0/2 - 13*t) - 24.0/5*sin(14.0/9 - 12*t) - 208.0/19*sin(11.0/7 - 10*t) - 23.0/4*sin(11.0/7 - 5*t) - 129.0/5*sin(11.0/7 - 4*t) - 62.0/7*sin(8.0/5 -t) + 19.0/2*sin(2*t + 8.0/5) + 33.0/8*sin(3*t + 8.0/5) + 44.0/7*sin(6*t + 8.0/5) + 11.0/5*sin(7*t + 8.0/5) + 33.0/5*sin(8*t + 8.0/5) + 23.0/5*sin(9*t + 8.0/5) + 9.0/4*sin(11*t + 11.0/7) + 8.0/7*sin(14*t + 5.0/3) + 5.0/6*sin(15*t + 11.0/7) + 7.0/8*sin(17*t + 11.0/7) + 1.0/10*sin(20*t + 8.0/5) + 7.0/8*sin(24*t + 8.0/5) + 1.0/3*sin(25*t + 14.0/3) + 7.0/4*sin(26*t + 5.0/3) + 3.0/4*sin(27*t + 5.0/3) + 4.0/5*sin(28*t + 7.0/4) + 19.0/9*sin(29*t + 5.0/3) + 1.0/8*sin(30*t + 27.0/7) + 2*sin(31*t + 5.0/3) + 1.0/15*sin(33*t + 6.0/7) + 1.0/4*sin(40*t + 5.0/3) + 1.0/2*sin(41*t + 7.0/4) + 2.0/5*sin(42*t + 9.0/5) + 8.0/9*sin(43*t + 12.0/7) + 1.0/24*sin(44*t + 7.0/3) + 1.0/5*sin(46*t + 5.0/3) + 1025.0/6)*theta(91*PI -t)*theta(t - 87*PI) + (-1.0/9*sin(11.0/7 - 23*t) - 1.0/4*sin(11.0/7 - 19*t) - 5.0/6*sin(11.0/7 - 11*t) - 55.0/9*sin(8.0/5 - 3*t) + 68.0/7*sin(t + 8.0/5) + 157.0/4*sin(2*t + 8.0/5) + 34.0/7*sin(4*t + 33.0/7) + 18.0/7*sin(5*t + 8.0/5) + 61.0/20*sin(6*t + 8.0/5) + 8.0/3*sin(7*t + 33.0/7) + 6.0/7*sin(8*t + 33.0/7) + 4.0/3*sin(9*t + 8.0/5) + 2.0/3*sin(10*t + 11.0/7) + 1.0/4*sin(12*t + 8.0/5) + 1.0/2*sin(13*t + 11.0/7) + 1.0/5*sin(14*t + 11.0/7) + 1.0/2*sin(15*t + 33.0/7) + 1.0/4*sin(16*t + 11.0/7) + 1.0/4*sin(17*t + 8.0/5) + 1.0/12*sin(18*t + 23.0/5) + 1.0/4*sin(20*t + 11.0/7) + 1.0/7*sin(21*t + 11.0/7) + 1.0/9*sin(22*t + 14.0/3) + 1.0/4*sin(24*t + 8.0/5) + 437.0/2)*theta(87*PI -t)*theta(t - 83*PI) + (-1.0/9*sin(11.0/7 - 19*t) - 1.0/11*sin(11.0/7 - 17*t) - 4.0/5*sin(8.0/5 - 16*t) - 4.0/7*sin(11.0/7 - 9*t) - 1.0/2*sin(11.0/7 - 8*t) - 2.0/3*sin(11.0/7 - 5*t) - 9.0/5*sin(11.0/7 - 4*t) - 48.0/5*sin(8.0/5 -t) + 90.0/7*sin(2*t + 8.0/5) + 116.0/9*sin(3*t + 8.0/5) + 27.0/7*sin(6*t + 8.0/5) + 4.0/3*sin(7*t + 8.0/5) + 1.0/5*sin(10*t + 33.0/7) + 1.0/3*sin(11*t + 8.0/5) + 1.0/8*sin(12*t + 8.0/5) + 3.0/5*sin(13*t + 33.0/7) + 1.0/4*sin(14*t + 8.0/5) + 1.0/4*sin(15*t + 8.0/5) + 1.0/4*sin(18*t + 8.0/5) + 1.0/13*sin(21*t + 11.0/7) + 1.0/18*sin(22*t + 11.0/7) + 1.0/5*sin(23*t + 11.0/7) + 1.0/5*sin(24*t + 11.0/7) + 199.0/5)*theta(83*PI -t)*theta(t - 79*PI) + (-1.0/3*sin(13.0/9 - 23*t) - 1.0/5*sin(7.0/5 - 19*t) - 2.0/5*sin(3.0/2 - 17*t) - 7.0/5*sin(8.0/5 - 11*t) - 23.0/5*sin(11.0/7 - 7*t) + 193.0/7*sin(t + 8.0/5) + 615.0/8*sin(2*t + 8.0/5) + 11.0/6*sin(3*t + 14.0/3) + 104.0/7*sin(4*t + 8.0/5) + 27.0/4*sin(5*t + 8.0/5) + 58.0/5*sin(6*t + 8.0/5) + 64.0/21*sin(8*t + 8.0/5) + 23.0/5*sin(9*t + 8.0/5) + 5.0/3*sin(10*t + 11.0/7) + 11.0/4*sin(12*t + 8.0/5) + 5.0/4*sin(13*t + 8.0/5) + 1.0/7*sin(14*t + 7.0/5) + 5.0/4*sin(16*t + 8.0/5) + 11.0/7*sin(18*t + 8.0/5) + 2.0/7*sin(20*t + 11.0/7) + 3.0/5*sin(21*t + 8.0/5) + 3.0/5*sin(22*t + 8.0/5) + 4.0/9*sin(24*t + 11.0/7) + 13.0/2)*theta(79*PI -t)*theta(t - 75*PI) + (-17.0/6*sin(11.0/7 - 32*t) - 15.0/4*sin(8.0/5 - 18*t) - 9.0/4*sin(7.0/5 - 8*t) + 477.0/5*sin(t + 33.0/7) + 1071.0/5*sin(2*t + 8.0/5) + 91.0/3*sin(3*t + 8.0/5) + 820.0/9*sin(4*t + 33.0/7) + 118.0/5*sin(5*t + 8.0/5) + 416.0/7*sin(6*t + 33.0/7) + 256.0/5*sin(7*t + 8.0/5) + 21.0/4*sin(9*t + 3.0/2) + 123.0/7*sin(10*t + 3.0/2) + 333.0/7*sin(11*t + 11.0/7) + 58.0/5*sin(12*t + 3.0/2) + 23.0/5*sin(13*t + 11.0/7) + 38.0/5*sin(14*t + 33.0/7) + 7*sin(15*t + 14.0/3) + 33.0/5*sin(16*t + 14.0/3) + 17.0/3*sin(17*t + 11.0/7) + 1.0/3*sin(19*t + 10.0/7) + 65.0/11*sin(20*t + 11.0/7) + 9.0/5*sin(21*t + 3.0/2) + 42.0/5*sin(22*t + 33.0/7) + 39.0/7*sin(23*t + 3.0/2) + 53.0/7*sin(24*t + 3.0/2) + 1.0/2*sin(25*t + 9.0/2) + 17.0/4*sin(26*t + 14.0/3) + 1.0/4*sin(27*t + 13.0/5) + 25.0/4*sin(28*t + 14.0/3) + 7.0/5*sin(29*t + 23.0/5) + 47.0/8*sin(30*t + 3.0/2) + 30.0/7*sin(31*t + 3.0/2) + 9.0/4*sin(33*t + 11.0/7) + 23.0/12*sin(34*t + 11.0/7) + 13.0/5*sin(35*t + 14.0/3) + 1163.0/4)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/7*sin(4.0/3 - 22*t) - 2.0/5*sin(3.0/2 - 21*t) - 1.0/4*sin(10.0/7 - 20*t) - 2.0/3*sin(3.0/2 - 16*t) - 1.0/4*sin(7.0/5 - 13*t) - 6.0/7*sin(3.0/2 - 12*t) - 3.0/7*sin(11.0/7 - 11*t) - 3.0/4*sin(11.0/7 - 8*t) - 12.0/7*sin(3.0/2 - 7*t) - 13.0/4*sin(11.0/7 - 6*t) - 10.0/7*sin(3.0/2 - 3*t) - 422.0/9*sin(11.0/7 - 2*t) + 8.0/5*sin(t + 33.0/7) + 21.0/11*sin(4*t + 5.0/3) + 11.0/6*sin(5*t + 11.0/7) + 1.0/5*sin(9*t + 7.0/4) + 7.0/8*sin(10*t + 8.0/5) + 1.0/5*sin(14*t + 23.0/5) + 1.0/10*sin(15*t + 9.0/7) + 1.0/9*sin(17*t + 7.0/5) + 1.0/4*sin(19*t + 5.0/3) + 1.0/7*sin(24*t + 7.0/4) + 817.0/3)*theta(71*PI -t)*theta(t - 67*PI) + (-1.0/19*sin(3.0/2 - 19*t) - 4.0/7*sin(11.0/7 - 18*t) - 3.0/5*sin(11.0/7 - 9*t) - 13.0/5*sin(11.0/7 - 8*t) - 273.0/8*sin(8.0/5 -t) + 93.0/5*sin(2*t + 33.0/7) + 505.0/21*sin(3*t + 8.0/5) + 3.0/2*sin(4*t + 8.0/5) + 18.0/5*sin(5*t + 8.0/5) + 32.0/11*sin(6*t + 8.0/5) + 9.0/4*sin(7*t + 8.0/5) + 3.0/4*sin(10*t + 33.0/7) + 2.0/7*sin(11*t + 11.0/7) + 1.0/4*sin(12*t + 11.0/7) + 5.0/4*sin(13*t + 8.0/5) + 1.0/6*sin(14*t + 8.0/5) + 2.0/5*sin(15*t + 8.0/5) + 1.0/5*sin(16*t + 8.0/5) + 1.0/6*sin(17*t + 8.0/5) + 1.0/13*sin(20*t + 14.0/3) + 1.0/5*sin(21*t + 8.0/5) + 1.0/7*sin(22*t + 11.0/7) + 2.0/5*sin(23*t + 8.0/5) + 513.0/2)*theta(67*PI -t)*theta(t - 63*PI) + (-2.0/3*sin(5.0/4 - 17*t) - 7.0/8*sin(10.0/7 - 16*t) - 131*sin(11.0/7 - 2*t) + 857.0/8*sin(t + 8.0/5) + 46*sin(3*t + 33.0/7) + 1124.0/7*sin(4*t + 8.0/5) + 130.0/7*sin(5*t + 5.0/3) + 11*sin(6*t + 8.0/5) + 43.0/4*sin(7*t + 8.0/5) + 71.0/7*sin(8*t + 5.0/3) + 209.0/6*sin(9*t + 8.0/5) + 113.0/9*sin(10*t + 14.0/3) + 94.0/5*sin(11*t + 8.0/5) + 10.0/3*sin(12*t + 5.0/3) + 5.0/3*sin(13*t + 2) + 433.0/24*sin(14*t + 8.0/5) + 4.0/5*sin(15*t + 19.0/9) + 7.0/4*sin(18*t + 14.0/3) + 46.0/15*sin(19*t + 5.0/3) + 8.0/7*sin(20*t + 12.0/7) + 11.0/7*sin(21*t + 8.0/5) +sin(22*t + 14.0/3) + 17.0/5*sin(23*t + 5.0/3) + 7.0/3*sin(24*t + 7.0/4) - 919.0/17)*theta(63*PI -t)*theta(t - 59*PI) + (-7.0/5*sin(3.0/2 - 22*t) - 1.0/11*sin(1 - 17*t) - 27.0/5*sin(11.0/7 - 16*t) - 23.0/4*sin(11.0/7 - 12*t) - 1.0/4*sin(9.0/8 - 11*t) - 235.0/4*sin(11.0/7 - 4*t) - 558.0/5*sin(11.0/7 - 2*t) - 837.0/4*sin(8.0/5 -t) + 768.0/7*sin(3*t + 8.0/5) + 221.0/6*sin(5*t + 8.0/5) + 5.0/7*sin(6*t + 8.0/5) + 269.0/6*sin(7*t + 8.0/5) + 63.0/4*sin(8*t + 8.0/5) + 127.0/6*sin(9*t + 8.0/5) + 97.0/7*sin(10*t + 8.0/5) + 32.0/3*sin(13*t + 8.0/5) + 3.0/4*sin(14*t + 8.0/5) + 10.0/7*sin(15*t + 3.0/2) + 12.0/5*sin(18*t + 8.0/5) + 43.0/6*sin(19*t + 8.0/5) + 16.0/5*sin(20*t + 8.0/5) + 5.0/2*sin(21*t + 8.0/5) + 8.0/7*sin(23*t + 8.0/5) + 11.0/10*sin(24*t + 8.0/5) - 59.0/4)*theta(59*PI -t)*theta(t - 55*PI) + (-33.0/7*sin(3.0/2 - 23*t) - 19.0/6*sin(11.0/7 - 19*t) - 18.0/5*sin(3.0/2 - 17*t) - 35.0/4*sin(3.0/2 - 13*t) - 49.0/10*sin(11.0/7 - 12*t) - 222.0/13*sin(11.0/7 - 10*t) - 161.0/6*sin(11.0/7 - 7*t) - 11.0/2*sin(11.0/7 - 6*t) - 139.0/5*sin(11.0/7 - 4*t) - 644.0/5*sin(11.0/7 - 3*t) - 622.0/9*sin(8.0/5 - 2*t) + 563.0/5*sin(t + 8.0/5) + 38.0/5*sin(5*t + 14.0/3) + 16.0/5*sin(8*t + 33.0/7) + 103.0/4*sin(9*t + 8.0/5) + 23.0/5*sin(11*t + 8.0/5) + 4.0/5*sin(14*t + 8.0/5) + 34.0/5*sin(15*t + 8.0/5) + 19.0/7*sin(16*t + 8.0/5) + 17.0/3*sin(18*t + 8.0/5) + 13.0/6*sin(20*t + 8.0/5) + 4.0/7*sin(21*t + 9.0/5) + 9.0/7*sin(22*t + 8.0/5) + 2.0/3*sin(24*t + 11.0/7) - 851.0/2)*theta(55*PI -t)*theta(t - 51*PI) + (-1.0/2*sin(3.0/2 - 31*t) - 3.0/2*sin(3.0/2 - 24*t) - 25.0/13*sin(10.0/7 - 23*t) - 3.0/2*sin(7.0/5 - 22*t) - 13.0/4*sin(3.0/2 - 21*t) - 7.0/3*sin(7.0/5 - 20*t) - 15.0/4*sin(10.0/7 - 19*t) - 17.0/5*sin(10.0/7 - 18*t) - 26.0/5*sin(3.0/2 - 17*t) - 39.0/7*sin(14.0/9 - 13*t) - 3.0/5*sin(20.0/19 - 12*t) - 62.0/5*sin(3.0/2 - 11*t) - 82.0/5*sin(3.0/2 - 10*t) - 116.0/5*sin(11.0/7 - 7*t) - 17.0/2*sin(3.0/2 - 6*t) - 94.0/7*sin(11.0/7 - 5*t) - 120.0/7*sin(11.0/7 - 4*t) - 547.0/5*sin(11.0/7 - 2*t) + 145.0/7*sin(t + 11.0/7) + 172.0/5*sin(3*t + 8.0/5) + 35.0/3*sin(8*t + 8.0/5) + 32.0/5*sin(9*t + 8.0/5) + 5.0/4*sin(14*t + 5.0/3) + 59.0/6*sin(15*t + 5.0/3) + 26.0/5*sin(16*t + 5.0/3) + 2.0/5*sin(25*t + 12.0/7) + 8.0/5*sin(26*t + 5.0/3) + 3.0/5*sin(27*t + 9.0/5) + 1.0/3*sin(28*t + 7.0/4) + 6.0/7*sin(29*t + 5.0/3) + 2.0/5*sin(30*t + 5.0/3) + 1.0/5*sin(32*t + 5.0/3) + 1.0/3*sin(33*t + 9.0/5) + 1.0/3*sin(34*t + 8.0/5) - 1562.0/5)*theta(51*PI -t)*theta(t - 47*PI) + (-5.0/4*sin(8.0/5 - 23*t) - 64.0/21*sin(11.0/7 - 21*t) - 12.0/5*sin(11.0/7 - 19*t) - 1.0/21*sin(13.0/9 - 14*t) - 3.0/2*sin(11.0/7 - 13*t) - 461.0/7*sin(8.0/5 - 3*t) - 309.0/2*sin(8.0/5 - 2*t) + 101.0/2*sin(t + 8.0/5) + 444.0/7*sin(4*t + 8.0/5) + 16*sin(5*t + 33.0/7) + 249.0/8*sin(6*t + 8.0/5) + 53.0/6*sin(7*t + 8.0/5) + 32.0/3*sin(8*t + 8.0/5) + 13.0/5*sin(9*t + 8.0/5) + 49.0/6*sin(10*t + 8.0/5) + 17.0/2*sin(11*t + 8.0/5) + 9.0/5*sin(12*t + 8.0/5) + 18.0/7*sin(15*t + 8.0/5) + 25.0/12*sin(16*t + 8.0/5) + 1.0/11*sin(17*t + 19.0/10) + 3.0/2*sin(18*t + 11.0/7) + 3.0/7*sin(20*t + 11.0/7) +sin(22*t + 11.0/7) + 7.0/5*sin(24*t + 8.0/5) - 4478.0/11)*theta(47*PI -t)*theta(t - 43*PI) + (-5.0/7*sin(7.0/5 - 32*t) - 3.0/5*sin(4.0/3 - 28*t) - 19.0/6*sin(3.0/2 - 24*t) - 33.0/5*sin(3.0/2 - 19*t) - 21.0/10*sin(11.0/7 - 16*t) - 7.0/2*sin(3.0/2 - 14*t) - 41.0/8*sin(11.0/7 - 8*t) - 149.0/7*sin(3.0/2 - 3*t) - 823.0/7*sin(11.0/7 - 2*t) - 216.0/5*sin(11.0/7 -t) + 59.0/6*sin(4*t + 33.0/7) + 25*sin(5*t + 8.0/5) + 91.0/9*sin(6*t + 5.0/3) + 56.0/5*sin(7*t + 8.0/5) + 31.0/3*sin(9*t + 8.0/5) + 3.0/5*sin(10*t + 21.0/5) + 50.0/7*sin(11*t + 8.0/5) + 32.0/7*sin(12*t + 12.0/7) + 24.0/5*sin(13*t + 5.0/3) + 3.0/4*sin(15*t + 10.0/11) + 11.0/3*sin(17*t + 7.0/4) + 5*sin(18*t + 8.0/5) + 10.0/3*sin(20*t + 8.0/5) + 11.0/2*sin(21*t + 5.0/3) + 2*sin(22*t + 9.0/2) + 21.0/5*sin(23*t + 8.0/5) + 13.0/5*sin(25*t + 8.0/5) + 14.0/15*sin(26*t + 32.0/7) + 9.0/8*sin(27*t + 3.0/2) + 1.0/3*sin(29*t + 41.0/9) + 27.0/14*sin(30*t + 7.0/4) + 7.0/8*sin(31*t + 9.0/5) + 1.0/5*sin(33*t + 6.0/7) - 1299.0/5)*theta(43*PI -t)*theta(t - 39*PI) + (-1.0/7*sin(3.0/2 - 17*t) - 1.0/3*sin(3.0/2 - 16*t) - 8.0/7*sin(11.0/7 - 15*t) - 3.0/4*sin(11.0/7 - 13*t) + 4081.0/20*sin(t + 33.0/7) + 209.0/7*sin(2*t + 8.0/5) + 43.0/5*sin(3*t + 11.0/7) + 33.0/5*sin(4*t + 8.0/5) + 73.0/5*sin(5*t + 8.0/5) + 63.0/8*sin(6*t + 11.0/7) + 53.0/6*sin(7*t + 8.0/5) + 32.0/5*sin(8*t + 8.0/5) + 22.0/5*sin(9*t + 11.0/7) + 17.0/8*sin(10*t + 11.0/7) + 14.0/9*sin(11*t + 8.0/5) + 1.0/4*sin(12*t + 33.0/7) + 1.0/2*sin(14*t + 33.0/7) + 3.0/5*sin(19*t + 3.0/2) + 4.0/7*sin(20*t + 11.0/7) + 3.0/5*sin(21*t + 11.0/7) + 3.0/4*sin(22*t + 11.0/7) + 2.0/5*sin(23*t + 11.0/7) + 1.0/3*sin(24*t + 11.0/7) - 5736.0/5)*theta(39*PI -t)*theta(t - 35*PI) + (-67.0/2*sin(8.0/5 - 4*t) - 13.0/4*sin(3.0/2 - 3*t) - 356.0/9*sin(11.0/7 -t) + 1397.0/4*sin(2*t + 8.0/5) + 139.0/7*sin(5*t + 8.0/5) + 277.0/6*sin(6*t + 8.0/5) + 271.0/18*sin(7*t + 11.0/7) + 32.0/7*sin(8*t + 11.0/7) + 25.0/8*sin(9*t + 8.0/5) + 109.0/9*sin(10*t + 8.0/5) + 9.0/5*sin(11*t + 8.0/5) + 16.0/7*sin(12*t + 8.0/5) + 3.0/5*sin(13*t + 14.0/3) + 40.0/7*sin(14*t + 8.0/5) + 3.0/4*sin(15*t + 7.0/4) + 1.0/6*sin(16*t + 8.0/5) + 1.0/6*sin(17*t + 11.0/6) + 23.0/8*sin(18*t + 8.0/5) + 8.0/5*sin(19*t + 8.0/5) + 4.0/3*sin(20*t + 8.0/5) + 1.0/18*sin(21*t + 7.0/4) + 7.0/3*sin(22*t + 8.0/5) + 11.0/6*sin(23*t + 8.0/5) + 2*sin(24*t + 11.0/7) - 11148.0/7)*theta(35*PI -t)*theta(t - 31*PI) + (-9.0/5*sin(11.0/7 - 24*t) - 1.0/2*sin(11.0/7 - 22*t) - 6.0/5*sin(11.0/7 - 20*t) - 3.0/5*sin(11.0/7 - 19*t) - 13.0/12*sin(11.0/7 - 18*t) - 7.0/3*sin(8.0/5 - 16*t) - 15.0/7*sin(11.0/7 - 15*t) - 11.0/4*sin(11.0/7 - 12*t) - 44.0/15*sin(11.0/7 - 11*t) - 13.0/2*sin(11.0/7 - 10*t) - 19.0/3*sin(11.0/7 - 6*t) - 35.0/2*sin(11.0/7 - 4*t) - 41.0/4*sin(11.0/7 - 3*t) - 805.0/6*sin(8.0/5 - 2*t) + 233.0/4*sin(t + 8.0/5) + 8.0/3*sin(5*t + 33.0/7) + 43.0/4*sin(7*t + 8.0/5) + 29.0/5*sin(8*t + 33.0/7) + 16.0/3*sin(9*t + 11.0/7) + 3*sin(13*t + 11.0/7) + 4.0/3*sin(14*t + 8.0/5) + 1.0/6*sin(17*t + 13.0/9) + 18.0/17*sin(21*t + 11.0/7) + 1.0/5*sin(23*t + 3.0/2) - 1681.0/4)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/8*sin(3.0/2 - 40*t) - 9.0/5*sin(11.0/7 - 32*t) - 6.0/5*sin(3.0/2 - 31*t) - 3.0/5*sin(3.0/2 - 30*t) - 16.0/17*sin(11.0/7 - 28*t) - 11.0/4*sin(8.0/5 - 27*t) - 4.0/5*sin(3.0/2 - 25*t) -sin(3.0/2 - 24*t) - 25.0/3*sin(11.0/7 - 23*t) - 89.0/10*sin(11.0/7 - 22*t) - 9.0/2*sin(11.0/7 - 21*t) - 29.0/7*sin(11.0/7 - 19*t) - 3.0/4*sin(7.0/5 - 17*t) - 47.0/5*sin(11.0/7 - 15*t) - 61.0/5*sin(11.0/7 - 14*t) - 179.0/10*sin(8.0/5 - 13*t) - 154.0/5*sin(11.0/7 - 12*t) - 1.0/3*sin(7.0/5 - 11*t) - 104.0/3*sin(8.0/5 - 6*t) - 2058.0/11*sin(8.0/5 - 3*t) + 622.0/3*sin(t + 8.0/5) + 985.0/9*sin(2*t + 8.0/5) + 131.0/2*sin(4*t + 8.0/5) + 41.0/3*sin(5*t + 11.0/7) + 181.0/13*sin(7*t + 8.0/5) + 27.0/7*sin(8*t + 11.0/7) + 95.0/6*sin(9*t + 11.0/7) + 74.0/5*sin(10*t + 8.0/5) + 17.0/6*sin(16*t + 11.0/7) + 4.0/5*sin(18*t + 8.0/5) + 8.0/5*sin(20*t + 3.0/2) + 1.0/2*sin(26*t + 8.0/5) + 1.0/8*sin(29*t + 7.0/5) + 2*sin(33*t + 33.0/7) + 3.0/5*sin(34*t + 8.0/5) + 12.0/5*sin(35*t + 8.0/5) + 9.0/10*sin(36*t + 8.0/5) + 9.0/5*sin(37*t + 14.0/3) + 1.0/8*sin(38*t + 8.0/5) + 1.0/5*sin(39*t + 8.0/5) - 2298.0/5)*theta(27*PI -t)*theta(t - 23*PI) + (-12.0/5*sin(11.0/7 - 17*t) - 505.0/14*sin(11.0/7 - 4*t) - 186*sin(11.0/7 - 3*t) + 406.0/5*sin(t + 33.0/7) + 518.0/3*sin(2*t + 8.0/5) + 89.0/5*sin(5*t + 8.0/5) + 189.0/4*sin(6*t + 8.0/5) + 305.0/16*sin(7*t + 8.0/5) + 236.0/7*sin(8*t + 8.0/5) + 28.0/3*sin(9*t + 5.0/3) + 81.0/20*sin(10*t + 8.0/5) + 13.0/5*sin(11*t + 14.0/3) + 103.0/8*sin(12*t + 8.0/5) + 22.0/5*sin(13*t + 5.0/3) + 29.0/4*sin(14*t + 8.0/5) + 11.0/5*sin(15*t + 5.0/3) + 1.0/2*sin(16*t + 2) + 6.0/7*sin(18*t + 3.0/2) + 11.0/5*sin(19*t + 33.0/7) + 21.0/4*sin(20*t + 8.0/5) + 5.0/3*sin(21*t + 5.0/3) + 2.0/3*sin(22*t + 5.0/3) + 1.0/3*sin(23*t + 11.0/6) + 6.0/5*sin(24*t + 5.0/3) + 9.0/10*sin(25*t + 14.0/3) + 12.0/5*sin(26*t + 8.0/5) + 5.0/4*sin(27*t + 7.0/4) + 5.0/4*sin(28*t + 11.0/7) + 4.0/9*sin(29*t + 14.0/3) + 11.0/12*sin(30*t + 5.0/3) + 4.0/7*sin(31*t + 23.0/5) + 3.0/5*sin(32*t + 3.0/2) + 2.0/5*sin(33*t + 9.0/2) + 3.0/2*sin(34*t + 8.0/5) + 1.0/9*sin(36*t + 7.0/4) + 2.0/3*sin(38*t + 5.0/3) - 4301.0/4)*theta(23*PI -t)*theta(t - 19*PI) + (-11.0/7*sin(11.0/7 - 34*t) - 11.0/4*sin(3.0/2 - 24*t) - 23.0/6*sin(11.0/7 - 17*t) - 32.0/5*sin(8.0/5 - 14*t) - 41.0/10*sin(11.0/7 - 11*t) - 17.0/3*sin(3.0/2 - 5*t) - 4676.0/25*sin(8.0/5 - 3*t) + 783.0/16*sin(t + 11.0/7) + 727.0/8*sin(2*t + 8.0/5) + 5.0/2*sin(4*t + 13.0/3) + 188.0/5*sin(6*t + 11.0/7) + 247.0/6*sin(7*t + 11.0/7) + 23.0/2*sin(8*t + 3.0/2) + 52.0/5*sin(9*t + 11.0/7) + 53.0/9*sin(10*t + 8.0/5) + 62.0/7*sin(12*t + 11.0/7) + 37.0/5*sin(13*t + 11.0/7) + 24.0/7*sin(15*t + 14.0/3) + 8.0/9*sin(16*t + 8.0/5) + 40.0/7*sin(18*t + 8.0/5) + 5.0/3*sin(19*t + 4.0/3) + 41.0/14*sin(20*t + 8.0/5) + 6.0/5*sin(21*t + 14.0/3) + 5.0/4*sin(22*t + 10.0/7) + 3.0/4*sin(23*t + 7.0/4) + 23.0/6*sin(25*t + 11.0/7) + 9.0/4*sin(26*t + 3.0/2) + 25.0/6*sin(27*t + 14.0/3) + 8.0/3*sin(28*t + 8.0/5) + 1.0/3*sin(29*t + 3.0/5) + 1.0/5*sin(30*t + 26.0/7) + 12.0/7*sin(31*t + 14.0/3) + 2*sin(32*t + 3.0/2) + 1.0/2*sin(33*t + 7.0/4) + 11.0/5*sin(35*t + 8.0/5) + 3.0/5*sin(36*t + 7.0/5) + 11.0/5*sin(37*t + 14.0/3) + 13.0/7*sin(38*t + 8.0/5) - 10170.0/11)*theta(19*PI -t)*theta(t - 15*PI) + (-23.0/6*sin(3.0/2 - 23*t) - 6.0/7*sin(4.0/3 - 22*t) - 17.0/6*sin(4.0/3 - 18*t) - 23.0/2*sin(3.0/2 - 17*t) - 22.0/5*sin(4.0/3 - 16*t) - 23.0/2*sin(3.0/2 - 15*t) - 5*sin(3.0/2 - 11*t) - 38.0/3*sin(3.0/2 - 10*t) - 14.0/3*sin(3.0/2 - 9*t) - 209.0/6*sin(3.0/2 - 7*t) - 239.0/4*sin(14.0/9 - 6*t) - 129.0/2*sin(11.0/7 - 4*t) - 1273.0/8*sin(11.0/7 - 3*t) + 45.0/7*sin(t + 14.0/3) + 531.0/7*sin(2*t + 8.0/5) + 55.0/4*sin(5*t + 3.0/2) + 127.0/9*sin(8*t + 8.0/5) + 21.0/2*sin(12*t + 8.0/5) + 25.0/7*sin(13*t + 14.0/3) + 59.0/5*sin(14*t + 8.0/5) + 3.0/5*sin(19*t + 7.0/4) + 2.0/5*sin(20*t + 18.0/7) + 33.0/5*sin(21*t + 5.0/3) + 6.0/5*sin(24*t + 10.0/7) - 10579.0/7)*theta(15*PI -t)*theta(t - 11*PI) + (-9.0/4*sin(3.0/2 - 20*t) - 13.0/5*sin(11.0/7 - 19*t) - 4.0/3*sin(11.0/7 - 18*t) - 11.0/6*sin(11.0/7 - 17*t) - 19.0/3*sin(11.0/7 - 16*t) - 9.0/2*sin(8.0/5 - 15*t) - 20.0/7*sin(14.0/9 - 14*t) - 235.0/26*sin(11.0/7 - 11*t) - 99.0/4*sin(11.0/7 - 7*t) - 143.0/4*sin(11.0/7 - 6*t) - 333.0/5*sin(8.0/5 - 4*t) - 568.0/5*sin(11.0/7 - 3*t) + 53.0/4*sin(t + 33.0/7) + 482.0/7*sin(2*t + 8.0/5) + 45.0/2*sin(5*t + 8.0/5) + 41.0/5*sin(8*t + 8.0/5) + 53.0/6*sin(9*t + 33.0/7) + 26.0/7*sin(10*t + 11.0/7) + 56.0/3*sin(12*t + 8.0/5) + 17.0/9*sin(13*t + 33.0/7) + 15.0/8*sin(21*t + 14.0/3) + 38.0/7*sin(22*t + 8.0/5) + 8.0/5*sin(23*t + 8.0/5) + 12.0/11*sin(24*t + 5.0/3) - 8857.0/7)*theta(11*PI -t)*theta(t - 7*PI) + (-18.0/5*sin(10.0/7 - 38*t) - 3.0/5*sin(10.0/7 - 37*t) - 11.0/6*sin(3.0/2 - 33*t) - 4.0/3*sin(3.0/2 - 30*t) - 16.0/5*sin(3.0/2 - 26*t) - 39.0/10*sin(3.0/2 - 23*t) - 3.0/5*sin(4.0/3 - 22*t) - 9.0/2*sin(3.0/2 - 21*t) - 2.0/3*sin(7.0/5 - 15*t) - 26.0/5*sin(14.0/9 - 9*t) - 141.0/5*sin(3.0/2 - 8*t) - 179.0/4*sin(11.0/7 - 7*t) - 5.0/6*sin(11.0/8 - 4*t) + 205.0/4*sin(t + 8.0/5) + 1067.0/8*sin(2*t + 8.0/5) + 12.0/11*sin(3*t + 9.0/5) + 71.0/4*sin(5*t + 33.0/7) + 161.0/2*sin(6*t + 8.0/5) + 8.0/7*sin(10*t + 3.0/2) + 120.0/17*sin(11*t + 5.0/3) + 87.0/4*sin(12*t + 8.0/5) + 11.0/7*sin(13*t + 12.0/7) + 15.0/4*sin(14*t + 8.0/5) + 2*sin(16*t + 8.0/5) + 62.0/7*sin(17*t + 5.0/3) + 8.0/5*sin(18*t + 5.0/3) + 8.0/7*sin(19*t + 7.0/4) + 4*sin(20*t + 8.0/5) + 27.0/5*sin(24*t + 5.0/3) + 4.0/7*sin(25*t + 33.0/7) + 7.0/3*sin(27*t + 5.0/3) + 2*sin(28*t + 5.0/3) + 14.0/5*sin(29*t + 5.0/3) + 1.0/5*sin(31*t + 14.0/3) + 35.0/9*sin(32*t + 5.0/3) + 8.0/7*sin(34*t + 5.0/3) + 3.0/7*sin(35*t + 14.0/3) + 19.0/9*sin(36*t + 5.0/3) + 22.0/21*sin(39*t + 5.0/3) + 12.0/13*sin(40*t + 5.0/3) - 13852.0/7)*theta(7*PI -t)*theta(t - 3*PI) + (-1.0/3*sin(5.0/4 - 36*t) - 15.0/4*sin(10.0/7 - 35*t) - 19.0/5*sin(10.0/7 - 28*t) - 17.0/6*sin(4.0/3 - 27*t) - 1.0/4*sin(6.0/5 - 26*t) - 25.0/13*sin(3.0/2 - 25*t) - 16.0/5*sin(3.0/2 - 19*t) - 81.0/5*sin(3.0/2 - 13*t) - 17.0/8*sin(10.0/7 - 10*t) - 55.0/8*sin(3.0/2 - 9*t) - 184.0/7*sin(3.0/2 - 8*t) - 451.0/7*sin(11.0/7 - 7*t) + 157.0/2*sin(t + 8.0/5) + 1220.0/9*sin(2*t + 8.0/5) + 7.0/5*sin(3*t + 2) + 7*sin(4*t + 8.0/5) + 9*sin(5*t + 5.0/3) + 219.0/4*sin(6*t + 8.0/5) + 13.0/4*sin(11*t + 8.0/5) + 17.0/4*sin(12*t + 11.0/7) + 19.0/5*sin(14*t + 8.0/5) + 5.0/2*sin(15*t + 5.0/3) + 1.0/5*sin(16*t + 40.0/13) + 59.0/6*sin(17*t + 5.0/3) + 13.0/5*sin(18*t + 12.0/7) + 11.0/7*sin(20*t + 8.0/5) + 7.0/6*sin(21*t + 22.0/5) + 231.0/23*sin(22*t + 5.0/3) + 3.0/5*sin(23*t + 7.0/3) +sin(24*t + 3.0/2) + 32.0/11*sin(29*t + 5.0/3) + 1.0/11*sin(30*t + 19.0/7) + 1.0/5*sin(31*t + 14.0/3) + 5.0/3*sin(32*t + 5.0/3) + 3.0/2*sin(33*t + 14.0/3) + 7.0/5*sin(34*t + 11.0/7) + 24.0/7*sin(37*t + 7.0/4) + 5.0/3*sin(38*t + 9.0/5) + 2.0/5*sin(39*t + 5.0/3) + 1.0/2*sin(40*t + 23.0/11) - 13537.0/8)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
